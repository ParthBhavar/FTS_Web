 @model FTS.Model.Entities.EmployeeMasterModel
@{
    ViewData["Title"] = "CHANGE PASSWORD";
    Layout = "~/Views/Shared/_AdminLayout.cshtml";
}
<div class="body">
    @Html.AntiForgeryToken()
    <div class="main-wrapper py-5">
            <div class="container-fluid">               
                <div class="content-box reg-box">
                    <div>
                          <img src="~/images/govtlogo.png" class="rounded mx-auto d-block pt-3" alt="logo">
                      <div class="content-header py-1">
                        <h3 class="text-center text-white mt-3" ><i class="fas fa-user mr-2"></i>
                          Change Password
                        </h3>
                      </div> 
                    </div>                    
                            <div class="content-body">
                                                              
                                 <div class="row form-group">
                                <label class="col-md-4 ">CurrentPassword<span class="text-danger"> *</span></label>
                                <div class="col-md-8">
                                    <span class="tooltip"> Password Must Contain Lowercase,Uppercase,Number  </span>
                                    @Html.TextBoxFor(e =>e.Password, new { @class = "form-control", type = "password",@ID="Password", placeholder = "Enter Current Password"})
                                    <i id="togglePassword" class="fa fa-eye"></i>
                                  
                                    <span class="text-danger ValidationSpan" id="SpanPassword" style="display:none;">Please Select Password </span>
                                    <span class="text-danger ValidationSpan" id="SpanvalidlowercasePassword" style="display:none;">Password must contain the following: A <b>lowercase</b> letter </span>
                                    <span class="text-danger ValidationSpan" id="SpanvalidUppercasePassword" style="display:none;">Password must contain the following: A <b>capital (uppercase)</b> letter</span>
                                    <span class="text-danger ValidationSpan" id="SpanvalidnumbersPassword" style="display:none;">Password must contain the following:A <b>number</b></span>
                                    <span class="text-danger ValidationSpan tooltiptext" id="SpanvalidPassword" style="display:none;">Plese Enter Password in Correct Format</span>
                                </div>
                            </div>
                                                                 
                             <div class="row form-group">
                                <label class="col-md-4 ">NewPassword<span class="text-danger"> *</span></label>
                                <div class="col-md-8">
                                    @Html.TextBoxFor(e =>e.CPassword, new { @class = "form-control", type = "password",@ID="CPassword", placeholder = "Enter New Password" })
                                    <i id="togglePassword" class="fa fa-eye"></i>
                                   <span class="text-danger ValidationSpan" id="SpancPassword" style="display:none;">Please Select Password </span>
                                   <span class="text-danger ValidationSpan" id="SpanvalidlowercasecPassword" style="display:none;">Password must contain the following: A <b>lowercase</b> letter</span>
                                   <span class="text-danger ValidationSpan" id="SpanvalidUppercasecPassword" style="display:none;">Password must contain the following: A <b>capital (uppercase)</b> letter</span>
                                   <span class="text-danger ValidationSpan" id="SpanvalidnumberscPassword" style="display:none;">Password must contain the following:A <b>number</b></span>
                                   <span class="text-danger ValidationSpan" id="SpanvalidPassword" style="display:none;">Plese Enter Password in Correct Format</span>
                                  
                                </div>
                            </div>

                                                              
                             <div class="row form-group">
                                <label class="col-md-4">ConfirmNewPassword<span class="text-danger"> *</span></label>
                                <div class="col-md-8">
                                    @Html.TextBoxFor(e =>e.CPassword, new { @class = "form-control", type = "Password",@ID="CPassword", placeholder = "Enter Confirm Password" })
                                    <i id="togglePassword" class="fa fa-eye"></i>
                                    <span class="text-danger ValidationSpan" id="SpanmatchPassword" style="display:none;">Password does not match.</span>
                                </div>
                            </div>

                            <div class="form-group">  
                                    <div class="d-md-flex d-block">
                                        <div class="col-md-12 text-center">
                                             <input type="button" id="btnsubmit" value="Change password" class="btn btn-primary" onclick="changeEmployeeMaster();" />
                                        </div>
                                    </div>
                             </div>
             
                             </div>
                            </div>
                </div>
            </div>           
</div>
@*@Html.AntiForgeryToken();*@

@*<div class="container">

    <div class="card">
          <div class="card-header">
               <h3 class="card-title">  
                    @ViewData["Title"]
                </h3>
           </div>

    <hr />

 <div class="card-body">
 
     <div class="box-body"> 


        <p> @ViewBag.errormessage</p>


            <form method="post">
                <div class="form-group">
                    <label class="col-md-3 ">Current Password<span class="text-danger"> *</span></label>
                    @Html.TextBoxFor(e =>e.Password, new { @class = "form-control", type = "password",@ID="Password", placeholder = "Enter current Password" })
                     <i id="togglePassword" class="fa fa-eye"></i>
                     <span class="text-danger ValidationSpan" id="SpanPassword" style="display:none;">Please Select Password </span>
                     <span class="text-danger ValidationSpan" id="SpanvalidlowercasePassword" style="display:none;">Password must contain the following: A <b>lowercase</b> letter </span>
                     <span class="text-danger ValidationSpan" id="SpanvalidUppercasePassword" style="display:none;">Password must contain the following: A <b>capital (uppercase)</b> letter</span>
                     <span class="text-danger ValidationSpan" id="SpanvalidnumbersPassword" style="display:none;">Password must contain the following:A <b>number</b></span>
                     <span class="text-danger ValidationSpan" id="SpanvalidPassword" style="display:none;">Plese Enter Password in Correct Format</span>
                </div>
                <div class="form-group">
                     <label class="col-md-3 ">New Password<span class="text-danger"> *</span></label>
                    @Html.TextBoxFor(e =>e.CPassword, new { @class = "form-control", type = "password",@ID="CPassword", placeholder = "Enter New Password" })
                     <i id="togglePassword" class="fa fa-eye"></i>
                     <span class="text-danger ValidationSpan" id="SpanCPassword" style="display:none;">Please Select Password </span>
                     <span class="text-danger ValidationSpan" id="SpanvalidlowercasePassword" style="display:none;">Password must contain the following: A <b>lowercase</b> letter</span>
                     <span class="text-danger ValidationSpan" id="SpanvalidUppercasePassword" style="display:none;">Password must contain the following: A <b>capital (uppercase)</b> letter</span>
                     <span class="text-danger ValidationSpan" id="SpanvalidnumbersPassword" style="display:none;">Password must contain the following:A <b>number</b></span>
                     <span class="text-danger ValidationSpan" id="SpanvalidPassword" style="display:none;">Plese Enter Password in Correct Format</span>
                     <span class="text-danger ValidationSpan" id="SpanmatchPassword" style="display:none;">Password does not match.</span>
                </div>
                <div class="form-group">
                     <label class="col-md-3 ">Confirm New Password<span class="text-danger"> *</span></label>
                    @Html.TextBoxFor(e =>e.CPassword, new { @class = "form-control", type = "password",@ID="CPassword", placeholder = "Enter confirm new  Password" })
                     <i id="togglePassword" class="fa fa-eye"></i>
                     <span class="text-danger ValidationSpan" id="SpanPassword" style="display:none;">Please Select Password </span>
                </div>
                <div class="form-group">
                    <input type="submit" value="Change password" class="btn btn-primary btn-block" onclick="changeEmployeeMaster()" />
                </div>
            </form>
        </div>
    </div>
  </div>
 </div>*@
 <style>
 body {
    position: relative;
    font-family: 'Nunito', sans-serif;
    color: #333;
    background-color: #eeeeee;
    font-weight: 400;
}
.container-fluid, .container-lg, .container-md, .container-sm, .container-xl {
    width: 100%;
    padding-right: 15px;
    padding-left: 15px;
    margin-right: auto;
    margin-left: auto;
}
.content-box {
    background: #fff;
    border-radius: 1.5rem;
    -moz-box-shadow: 0px 2px 15px rgba(0, 0, 0, 0.2);
    -webkit-box-shadow: 0px 2px 15px rgb(0 0 0 / 20%);
    box-shadow: 0px 2px 15pxrgb(0 0 0 / 20%);
    overflow: hidden;
    height: 100%;
}
.reg-box {
    max-width: 620px;
    margin: 0 auto;
    width: 100%;
    height: auto !important;
}
.content-header {
    background: #022d62 !important;
    color: #ffffff;
    padding: 5px 2px;
        margin-top: 15px;
}
.content-body {
    padding: 20px;
    font-size: 1rem;
    line-height: 1.4;
}
.form-group{
     width: 100%;
}
.form-control {
    display: block;
    width: 100%;
    height: calc(1.5em + 0.75rem + 2px);
    padding: 0.375rem 0.75rem;
    font-size: 1rem;
    font-weight: 400;
    line-height: 1.5;
    color: #495057;
    background-color: #fff;
    background-clip: padding-box;
    border: 1px solid #ced4da;
    border-radius: 0.25rem;
    transition: border-color .15s ease-in-out,box-shadow .15s ease-in-out;
}
.content-body .col-form-label {
    font-weight: 600;
    padding-top: 0;
}
.col-form-label {
    padding-top: calc(0.375rem + 1px);
    padding-bottom: calc(0.375rem + 1px);
    margin-bottom: 0;
    font-size: inherit;
    line-height: 1.5;
}
.btn-primary {
    background: #ef3139;
    border-color: #ef3139;
}
.btn-primary::hover{
    background: #0a73aa;
    border-color: #0a73aa;
}
 #togglePassword {
    float: right;
    top: -25px;
    right: 10px;
    position: relative;
    cursor: pointer;
}
 </style>
<script src="~/Scripts/js/Crypto-sha1.js"></script>
@*<script src="~/Scripts/js/GetSHACode.js"></script>*@
<script>
function PWD(password) {
    var h = Crypto.SHA1(password);
    return h;
}
</script>
<script>

      $("input[type='checkbox']").on('change', function(){
       $(this).val(this.checked ? "true" : "false");
       })
     
       
   </script>

  <script>  

       function changeEmployeeMaster() {
            debugger;
             var ErrorCnt = 0;
             var passwordregEx = /^(?=\S*[a-z])(?=\S*[A-Z])(?=\S*\d)(?=\S*[^\w\s])\S{8,}$/;
             var lowerCaseLettersregEx = /[a-z]/g;
             var upperCaseLetters = /[A-Z]/g;
             var numbers = /[0-9]/g;
             var password = $("#Password").val();
             var cPassword = $("#CPassword").val();
            $('.ValidationSpan').hide();


            if ($("#password").val() == "0" || $("#password").val() == "") {
                 ErrorCnt++;
                $('#SpanPassword').show();
            }
            if ($("#cPassword").val() == "0" || $("#cPassword").val() == "") {
                 ErrorCnt++;
                $('#SpanCPassword').show();
            }
            
            else if (!password.match(lowerCaseLettersregEx)) {
                 ErrorCnt++;
                $('#SpanvalidlowercasePassword').show();
            }
            else if (!password.match(upperCaseLetters)) {
                 ErrorCnt++;
                $('#SpanvalidUppercasePassword').show();
            }
            else if (!password.match(numbers)) {
                 ErrorCnt++;
                $('#SpanvalidnumbersPassword').show();
            }
            else if (!password.match(passwordregEx)) {
                 ErrorCnt++;
                $('#SpanvalidPassword').show();
            }
            else if (!cPassword.match(lowerCaseLettersregEx)) {
                 ErrorCnt++;
                $('#SpanvalidlowercasePassword').show();
            }
            else if (!cPassword.match(upperCaseLetters)) {
                 ErrorCnt++;
                $('#SpanvalidUppercasePassword').show();
            }
            else if (!cPassword.match(numbers)) {
                 ErrorCnt++;
                $('#SpanvalidnumbersPassword').show();
            }
            else if (!cPassword.match(passwordregEx)) {
                 ErrorCnt++;
                $('#SpanvalidPassword').show();
            }
            if ($("#cPassword").val() == "0" || $("#cPassword").val() == "") {
                ErrorCnt++;
                $('#SpancPassword').show();
            }
            else if ($("#password").val() != $("#cPassword").val()) {
                ErrorCnt++;
                $('#SpanmatchPassword').show();
            }
          
            if (ErrorCnt > 0) {
                return false;
            }


            if (ErrorCnt == 0) {
                 debugger;
                var password = $("#Password").val(PWD($("#Password").val()));
                var cpassword = $("#CPassword").val(PWD($("#CPassword").val()));
                var myData = {
                    Password:  password.val(),
                    CPassword : cpassword.val()
                };
                $.ajax
                    ({
                        type: "POST",   
                        url: "/EmployeeLogin/ChangeEmployeePassword",
                        headers: {"XSRF-TOKEN": document.getElementsByName("__RequestVerificationToken")[0].value},
                        dataType: "json",
                        data: myData,
                        success: function(data) {
                            debugger;

                            if (data.data.ErrorCode == 0) {
                                swal(data.data.ErrorMassage)
                                .then((value) => {
                                    window.location.href = "/EmployeeLogin/Index";
                                });
                            }
                            else {
                                swal(data.data.ErrorMassage);
                            }

                            //if (data.data.ErrorCode == 0) {
                            //    window.location.href = "/Dashboard/Index";
                            //    alert(data.data.ErrorMassage);
                            //}
                            //else {
                            //     alert(data.data.ErrorMassage);
                            //}

                        },

                       error: function (request, message, error) 
                        {
                            debugger; 
                            swal(request.responseJSON);
                          }
                    })
            }
    }

  </script>
  <script type="text/javascript">
     var togglePassword = document.querySelector('#togglePassword');
     var password = document.querySelector('#Password');
          togglePassword.addEventListener('click', function (e) {
          const type = password.getAttribute('type') === 'password' ? 'text' : 'password';
          password.setAttribute('type', type);
          this.classList.toggle('fa-eye-slash');
     });
   </script>